// Code generated by go-swagger; DO NOT EDIT.

package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCommentParams creates a new CommentParams object
// with the default values initialized.
func NewCommentParams() CommentParams {
	var ()
	return CommentParams{}
}

// CommentParams contains all the bound params for the comment operation
// typically these are obtained from a http.Request
//
// swagger:parameters comment
type CommentParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*文章评论
	  Required: true
	  In: query
	*/
	Comment string
	/*邮箱地址
	  In: query
	*/
	Mail *string
	/*昵称
	  In: query
	*/
	Nickname *string
	/*文章标题
	  Required: true
	  In: query
	*/
	Title string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CommentParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qComment, qhkComment, _ := qs.GetOK("comment")
	if err := o.bindComment(qComment, qhkComment, route.Formats); err != nil {
		res = append(res, err)
	}

	qMail, qhkMail, _ := qs.GetOK("mail")
	if err := o.bindMail(qMail, qhkMail, route.Formats); err != nil {
		res = append(res, err)
	}

	qNickname, qhkNickname, _ := qs.GetOK("nickname")
	if err := o.bindNickname(qNickname, qhkNickname, route.Formats); err != nil {
		res = append(res, err)
	}

	qTitle, qhkTitle, _ := qs.GetOK("title")
	if err := o.bindTitle(qTitle, qhkTitle, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CommentParams) bindComment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("comment", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("comment", "query", raw); err != nil {
		return err
	}

	o.Comment = raw

	return nil
}

func (o *CommentParams) bindMail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Mail = &raw

	return nil
}

func (o *CommentParams) bindNickname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Nickname = &raw

	return nil
}

func (o *CommentParams) bindTitle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("title", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("title", "query", raw); err != nil {
		return err
	}

	o.Title = raw

	return nil
}
