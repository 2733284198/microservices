// Code generated by go-swagger; DO NOT EDIT.

package comment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"microservices/models"
)

// CommentOKCode is the HTTP code returned for type CommentOK
const CommentOKCode int = 200

/*CommentOK 成功

swagger:response commentOK
*/
type CommentOK struct {

	/*
	  In: Body
	*/
	Payload *models.OkModel `json:"body,omitempty"`
}

// NewCommentOK creates CommentOK with default headers values
func NewCommentOK() *CommentOK {
	return &CommentOK{}
}

// WithPayload adds the payload to the comment o k response
func (o *CommentOK) WithPayload(payload *models.OkModel) *CommentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the comment o k response
func (o *CommentOK) SetPayload(payload *models.OkModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CommentBadRequestCode is the HTTP code returned for type CommentBadRequest
const CommentBadRequestCode int = 400

/*CommentBadRequest 失败

swagger:response commentBadRequest
*/
type CommentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewCommentBadRequest creates CommentBadRequest with default headers values
func NewCommentBadRequest() *CommentBadRequest {
	return &CommentBadRequest{}
}

// WithPayload adds the payload to the comment bad request response
func (o *CommentBadRequest) WithPayload(payload *models.ErrorModel) *CommentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the comment bad request response
func (o *CommentBadRequest) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
