// Code generated by go-swagger; DO NOT EDIT.

package like

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LikeHandlerFunc turns a function with the right signature into a like handler
type LikeHandlerFunc func(LikeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LikeHandlerFunc) Handle(params LikeParams) middleware.Responder {
	return fn(params)
}

// LikeHandler interface for that can handle valid like params
type LikeHandler interface {
	Handle(LikeParams) middleware.Responder
}

// NewLike creates a new http.Handler for the like operation
func NewLike(ctx *middleware.Context, handler LikeHandler) *Like {
	return &Like{Context: ctx, Handler: handler}
}

/*Like swagger:route GET /like like like

点了一个赞

*/
type Like struct {
	Context *middleware.Context
	Handler LikeHandler
}

func (o *Like) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewLikeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
