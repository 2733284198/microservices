// Code generated by go-swagger; DO NOT EDIT.

package like

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"microservices/models"
)

// LikeOKCode is the HTTP code returned for type LikeOK
const LikeOKCode int = 200

/*LikeOK 成功

swagger:response likeOK
*/
type LikeOK struct {

	/*
	  In: Body
	*/
	Payload *models.OkModel `json:"body,omitempty"`
}

// NewLikeOK creates LikeOK with default headers values
func NewLikeOK() *LikeOK {
	return &LikeOK{}
}

// WithPayload adds the payload to the like o k response
func (o *LikeOK) WithPayload(payload *models.OkModel) *LikeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the like o k response
func (o *LikeOK) SetPayload(payload *models.OkModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LikeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LikeBadRequestCode is the HTTP code returned for type LikeBadRequest
const LikeBadRequestCode int = 400

/*LikeBadRequest 失败

swagger:response likeBadRequest
*/
type LikeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewLikeBadRequest creates LikeBadRequest with default headers values
func NewLikeBadRequest() *LikeBadRequest {
	return &LikeBadRequest{}
}

// WithPayload adds the payload to the like bad request response
func (o *LikeBadRequest) WithPayload(payload *models.ErrorModel) *LikeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the like bad request response
func (o *LikeBadRequest) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LikeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
